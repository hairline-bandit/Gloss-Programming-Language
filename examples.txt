* In order of mention in docs.md
* The syntax is highly, highly, highly, specific and you need to mind which space is where (or else parser doesn't work)

null main()<
> do; 
> stuff;
<

dis: "Hello World";
* In use
null main()<
> dis: "Hello World";
<

int a: 5;
str b: "5";
bool c: true;
* In use
null main()<
> int a: 5;
<

int a: 5;
a += 4
(a is now 9)
a = 3;
(a is now 3)
* In use
null main()<
> int a: 5;
> a += 3;
> dis: a;
<
(Prints 8)

null print_greet()<
> dis: "Hello";
<
int add_these(int a, int b)<
> return a + b;
<
* Executing these
print_greet();
add_these(5, 6);

if (condition)<
> do;
> stuff;
< nor (condition)<
> do; 
> stuff;
< else < 
> do;
> stuff;
<
* Nested
if ()<
> if ()<
>> do stuff;
>< * ends nested if
< * ends first if

for (int i >> 0, 10)<
> dis: i;
> i += 0;
<
* Starts at first val (0) and goes to second - 1 (because non inclusive)
* Note "i += 0;" this is due to variables from loops (and all variables for that matter) having to be used due to GoLang being the implementation lanuage
for (int i << 0, 10)<
> dis: i;
> i += 0;
<
* Starts at second val (10) and goes to second + 1 (because non inclusive)
* Note that to loop with math in the loop ie. "for (int i >> 1+2, 10)<" you will have to not put a space between the operations (or define a new var with the math and use it)
