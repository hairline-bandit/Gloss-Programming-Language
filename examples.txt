* In order of mention in docs.md
* The syntax is highly, highly, highly, specific and you need to mind which space is where (or else parser doesn't work)

null main()<
> do; 
> stuff;
<

dis: "Hello World";
* In use
null main()<
> dis: "Hello World";
<

int a: 5;
str b: "5";
bool c: true;
* In use
null main()<
> int a: 5;
<

int a: 5;
a += 4
(a is now 9)
a = 3;
(a is now 3)
* In use
null main()<
> int a: 5;
> a += 3;
> dis: a;
<
(Prints 8)

null print_greet()<
> dis: "Hello";
<
int add_these(int a, int b)<
> return a + b;
<
* Executing these
print_greet();
add_these(5, 6);

if (condition)<
> do;
> stuff;
< nor (condition)<
> do; 
> stuff;
< else < 
> do;
> stuff;
<
* Nested
if ()<
> if ()<
>> do stuff;
>< * ends nested if
< * ends first if

for (int i >> 0, 10)<
> dis: i;
> i += 0;
<
* Starts at first val (0) and goes to second - 1 (because non inclusive)
* Note "i += 0;" this is due to variables from loops (and all variables for that matter) having to be used due to GoLang being the implementation lanuage
for (int i << 0, 10)<
> dis: i;
> i += 0;
<
* Starts at second val (10) and goes to second + 1 (because non inclusive)
* Note that to loop with math in the loop ie. "for (int i >> 1+2, 10)<" you will have to not put a space between the operations (or define a new var with the math and use it)

[]int a: [1, 2, 3];
pop: a;
push: a, 4;
* The integer array "a" becomes [1, 2, 4] as 3 is removed and then 4 is added
[]int b: [1, 2, 3, 4];
remove: b, 1;
* The integer array "b" becomes [1, 3, 4] as 2 (index 1) is removed
str a: "This is a string";
strIndex: a, "is", b;
* The int "b" becomes 2 as the first index of "is" is in "This" at index 2
str c: "This is a string";
strRindex: c, "is", d;
* The int "d" becomes 5 as the last index (rightmost) of "is" is index 5
str a: "Let's split this";
split: a, " ", b;
* The string array "b" becomes ["Let's", "split", "this"] as the delimeter " " is splitting the string
[]str a: ["Let's", "join", "this"];
join: a, " ", b;
* The string "b" becomes "Let's join this" as the " " separator is put between each value
[]str a: ["There", "is", "2", "is"];
arrIndexS: a, "is", b;
* The int "b" becomes 1 as the first (leftmost) index of "is" in "a" is index 1
* Note that to look through int, flt, char, or bool arrays, you have to change the "S" in arrIndexS to I, F, C, or B, repectively. 
[]str c: ["There", "is", "2", "is"];
arrRindexS: c, "is", d;
* The int "d" becomes 3 as the last (rightmost) index of "is" in "c" is index 3
* Note that to look through int, flt, char, or bool arrays, you have to change the "S" in arrRindexS to I, F, C, or B, repectively. 
str a: "";
scan: str, a, "Enter your name: ";
* The str "a" becomes the user's name (or whatever is entered)
int b: 0;
scan: int, b, "Enter an integer: ";
* The int "b" becomes whatever integer the user entered

